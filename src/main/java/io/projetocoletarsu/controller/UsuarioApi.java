/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.projetocoletarsu.controller;

import io.projetocoletarsu.model.retorno.Retorno;
import io.projetocoletarsu.model.Usuario;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@Api(value = "usuario", description = "the usuario API")
public interface UsuarioApi {

    @ApiOperation(value = "Atualizar um Usuario existente", nickname = "atualizarUsuario", notes = "endpoint que atualiza um usuario na base de dados.", response = Retorno.class, tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Atualizacao realizada com sucesso", response = Retorno.class),
            @ApiResponse(code = 400, message = "ID do Usuario invalido"),
            @ApiResponse(code = 404, message = "Usuario Nao Encontrado"),
            @ApiResponse(code = 422, message = "Request nao processada")})
    @RequestMapping(value = "/usuario/{idUsuario}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Retorno> atualizarUsuario(@ApiParam(value = "Usuario atualizado", required = true) @Valid @RequestBody Usuario body, @ApiParam(value = "ID do Usuario", required = true) @PathVariable("idUsuario") Integer idUsuario);


    @ApiOperation(value = "Buscar todos Usuarios", nickname = "buscarTodosUsuarios", notes = "endpoint que busca todos usuarios da base de dados.", response = Usuario.class, responseContainer = "List", tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Sucesso ao buscar todos usuarios", response = Usuario.class, responseContainer = "List"),
            @ApiResponse(code = 204, message = "Nenhum Usuario encontrado na base de dados"),
            @ApiResponse(code = 422, message = "Request nao processada")})
    @RequestMapping(value = "/usuario",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Usuario>> buscarTodosUsuarios();


    @ApiOperation(value = "Buscar um Usuario {ID}", nickname = "buscarUsuarioPorId", notes = "endpoint que busca um usuario pelo id na base de dados.", response = Usuario.class, tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Sucesso ao buscar usuario", response = Usuario.class),
            @ApiResponse(code = 400, message = "ID do Usuario invalido"),
            @ApiResponse(code = 404, message = "Usuario Nao Encontrado"),
            @ApiResponse(code = 422, message = "Request nao processada")})
    @RequestMapping(value = "/usuario/{idUsuario}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Usuario> buscarUsuarioPorId(@ApiParam(value = "Id do Usuario", required = true) @PathVariable("idUsuario") Integer idUsuario);


    @ApiOperation(value = "Adicionar um novo Usuario", nickname = "criarUsuario", notes = "endpoint que cria um usuario na base de dados.", tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Usuario inserido com sucesso"),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 422, message = "Request nao processada")})
    @RequestMapping(value = "/usuario",
            produces = {"application/json"},
            consumes = {"application/json"},

            method = RequestMethod.POST)
    ResponseEntity<Retorno> criarUsuario(@ApiParam(value = "Novo Usuario", required = true) @RequestBody Usuario body);


    @ApiOperation(value = "Deletar um Usuario", nickname = "deletarUsuario", notes = "endpoint que deleta um usuario pelo id na base de dados.", tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "exclusao realizada com sucesso"),
            @ApiResponse(code = 400, message = "ID do Usuario invalido"),
            @ApiResponse(code = 404, message = "Usuario Nao Encontrado"),
            @ApiResponse(code = 405, message = "Erro de Validacao")})
    @RequestMapping(value = "/usuario/{idUsuario}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deletarUsuario(@ApiParam(value = "Id do Usuario", required = true) @PathVariable("idUsuario") Integer idUsuario);


    @ApiOperation(value = "Logar do Usuario", nickname = "logarUsuario", notes = "endpoint que loga um usuario na aplicacao.", response = Retorno.class, tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "sucesso ao realizar login", response = Retorno.class),
            @ApiResponse(code = 400, message = "Campos invalidos enviados na request", response = Retorno.class),
            @ApiResponse(code = 404, message = "Usuario Nao Encontrado", response = Retorno.class),
            @ApiResponse(code = 405, message = "Erro de Validacao", response = Retorno.class)})
    @RequestMapping(value = "/usuario/logar",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Retorno> logarUsuario(@ApiParam(value = "Email do Usuario", required = true) @RequestHeader(value = "usuario", required = true) String usuario, @ApiParam(value = "Senha do Usuario", required = true) @RequestHeader(value = "senha", required = true) String senha);

    @ApiOperation(value = "Logout do Usuario", nickname = "logoutUsuario", notes = "endpoint que faz logoff na aplicacao", tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/usuario/logout",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Void> logoutUsuario();


    @ApiOperation(value = "Recuperar Senha do Usuario", nickname = "recuperarSenha", notes = "endpoint que envia senha para o email do usuario.", response = Retorno.class, tags = {"usuario",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "sucesso ao reenviar email com a senha ao cliente", response = Retorno.class),
            @ApiResponse(code = 422, message = "Campos invalidos enviados na request", response = Retorno.class)})
    @RequestMapping(value = "/usuario/recuperar-senha",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Retorno> recuperarSenha(@ApiParam(value = "email do usuario a ser recuperado a senha", required = true) @Valid @RequestBody Retorno body);

}
